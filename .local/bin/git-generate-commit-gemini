#!/bin/bash

# This script generates a concise Git commit message based on staged changes
# using the Gemini API.

# --- Configuration ---
GEMINI_MODEL="gemini-2.0-flash" # Recommended model for text generation
API_BASE_URL="https://generativelanguage.googleapis.com/v1beta/models"

# --- Pre-checks ---

# Check for staged changes
diff=$(git diff --cached)

if [ -z "$diff" ]; then
  echo "⚠️ No staged changes to commit. Please stage your changes first (e.g., 'git add .')."
  exit 1
fi

# Make sure the API key is set
if [ -z "$GEMINI_API_KEY" ]; then
  echo "❌ GEMINI_API_KEY environment variable is not set."
  echo "Please set it before running the script (e.g., 'export GEMINI_API_KEY=\"YOUR_API_KEY\"')."
  echo "You can get an API key from https://aistudio.google.com/app/apikey"
  exit 1
fi

# --- Prepare API Request ---

# Prepare safe JSON prompt using jq
# The prompt asks Gemini to generate a concise commit message based on the diff.
prompt=$(jq -Rn --arg diff "$diff" '{
  contents: [
    {
      parts: [
        {
          text: "Generate a concise git commit message (max 80 characters, imperative mood, no leading emoji) based on the following git diff. Focus on the core change and its purpose:\n\n```diff\n\($diff)\n```"
        }
      ]
    }
  ]
}')

# --- Send to Gemini API ---

echo "✨ Generating commit message with Gemini..."

# Send the request to the Gemini API using curl
# -s: Silent mode (don't show progress or error messages)
# -X POST: Specify POST request method
# -H "Content-Type: application/json": Set the content type header
# -d "$prompt": Send the JSON payload
response=$(curl -s -X POST \
  "${API_BASE_URL}/${GEMINI_MODEL}:generateContent?key=$GEMINI_API_KEY" \
  -H "Content-Type: application/json" \
  -d "$prompt")

# Check if curl command was successful
if [ $? -ne 0 ]; then
  echo "❌ Failed to connect to Gemini API. Check your network connection or API key."
  echo "Curl command failed with exit code: $?"
  exit 1
fi

# --- Extract and Handle Response ---

# Extract the commit message from the JSON response
# .candidates[0].content.parts[0].text: Navigates to the text content
# // empty: Provides an empty string if the path doesn't exist, preventing 'null' output
commit_msg=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text // empty')

# Handle errors if commit message is empty or API returned an error
if [ -z "$commit_msg" ]; then
  echo "❌ Failed to generate commit message. API response might be an error or empty content:"
  echo "$response" | jq . # Pretty print the full response for debugging
  exit 1
fi

# --- Output and Clipboard ---

echo "✅ Generated commit message:"
echo ""
echo "$commit_msg"
echo ""

# Copy to clipboard if xclip or wl-copy is available
if command -v xclip &>/dev/null; then
  echo "$commit_msg" | xclip -selection clipboard
  echo "📝 Copied to clipboard (xclip)."
elif command -v wl-copy &>/dev/null; then
  echo "$commit_msg" | wl-copy
  echo "📝 Copied to clipboard (wl-copy)."
else
  echo "💡 Install 'xclip' or 'wl-copy' to enable clipboard copying."
fi
